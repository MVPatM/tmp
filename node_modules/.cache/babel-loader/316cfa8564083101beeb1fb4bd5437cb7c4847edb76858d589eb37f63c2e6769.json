{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hsy99\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\prj1\\\\client\\\\src\\\\components\\\\IntegrateNFT\\\\IntegrateNFT.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from \"./integratenftcss.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IntegrateNFT() {\n  _s();\n  const [nftList, setnftList] = useState([\"a NFT\", \"b NFT\", \"c NFT\", \"dnft\", \"c\", \"e\", \"f\", \"e\", \"f\", \"e\"]);\n  const [selectedNum, setSelectedNum] = useState(0);\n  const [selectednftList, setselectednftList] = useState([false, false, false, false, false, false, false, false, false, false]);\n  const sendNFT = () => {};\n  const changeSelectednftList = index => {\n    let copyList = [...selectednftList];\n    copyList[index] = !copyList[index];\n    if (copyList[index]) setSelectedNum(selectedNum + 1);else setSelectedNum(selectedNum - 1);\n    console.log(copyList[index]);\n    setselectednftList(copyList);\n  };\n  const RenderNFTList = () => {\n    return nftList.map((nft, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${styles.nftcomponent} ${selectednftList[idx] ? styles.selected : \"\"}`,\n      onClick: () => changeSelectednftList(idx),\n      children: nft\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.integratenft,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nftinfo,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.result,\n        children: \"RESULT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.makebutton,\n        children: \"Make Integrated NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nftlist,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.title,\n        children: \"NFT LIST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), RenderNFTList(), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.integratebutton,\n        onClick: sendNFT,\n        children: [\"Integrate \", selectedNum, \" NFT\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(IntegrateNFT, \"k82Yg+A2KXGaS8vaiRYWAka5q0Q=\");\n_c = IntegrateNFT;\nexport default IntegrateNFT;\nvar _c;\n$RefreshReg$(_c, \"IntegrateNFT\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","IntegrateNFT","_s","nftList","setnftList","selectedNum","setSelectedNum","selectednftList","setselectednftList","sendNFT","changeSelectednftList","index","copyList","console","log","RenderNFTList","map","nft","idx","className","nftcomponent","selected","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","integratenft","nftinfo","result","makebutton","nftlist","title","integratebutton","_c","$RefreshReg$"],"sources":["C:/Users/hsy99/OneDrive/바탕 화면/prj1/client/src/components/IntegrateNFT/IntegrateNFT.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport styles from \"./integratenftcss.module.css\";\r\n\r\n\r\nfunction IntegrateNFT(){\r\n    const [nftList, setnftList] = useState([\"a NFT\", \"b NFT\", \"c NFT\", \"dnft\",\"c\",\"e\",\"f\",\"e\",\"f\",\"e\"]);\r\n    const [selectedNum, setSelectedNum] = useState(0);\r\n    const [selectednftList, setselectednftList] = useState([false, false, false, false,false,false,false,false,false,false]);\r\n\r\n    const sendNFT = () => {\r\n\r\n    }\r\n\r\n\r\n    const changeSelectednftList = (index) => {\r\n        let copyList = [...selectednftList];\r\n        copyList[index] = !copyList[index];\r\n        if(copyList[index]) setSelectedNum(selectedNum + 1);\r\n        else setSelectedNum(selectedNum - 1);\r\n        console.log(copyList[index]);\r\n        setselectednftList(copyList);\r\n    }\r\n\r\n    const RenderNFTList = () => {\r\n        return nftList.map((nft, idx) => (\r\n                \r\n                <button key = {idx} className = {`${styles.nftcomponent} ${selectednftList[idx] ? styles.selected : \"\"}`} onClick = {() => changeSelectednftList(idx)}>\r\n                    {nft}\r\n                </button>\r\n            ))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.integratenft}>\r\n            <div className={styles.nftinfo}>\r\n                <div className={styles.result}>\r\n                    RESULT\r\n                </div>\r\n                <button className={styles.makebutton}>\r\n                    Make Integrated NFT\r\n                </button>\r\n            </div>\r\n            <div className={styles.nftlist}>\r\n                <div className = {styles.title}>NFT LIST</div>\r\n                {RenderNFTList()}\r\n                <button className = {styles.integratebutton} onClick = {sendNFT}>\r\n                    Integrate {selectedNum} NFT\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IntegrateNFT;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}